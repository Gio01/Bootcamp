Create a new angular app (bug-tracker-app)
    Use the given template (bug-tracker-template.html) to create a "BugsComponent" with the following functionaliy
    Use Cases:
        (done) 1. Add new bugs (Array)
        (done) 2. List the added bugs (Display in a ngFor for all el in array)
        (done) 3. Remove any bug (being able to splice/remove the index of the wanted removed one!)
        (done) 4. Toggle the 'closed' status of any bug
        (done) 5. Remove 'all closed' bugs
        (done) 6. Display stats ( # of closed bugs / total # of bugs )
        (done) 7. Improvise 'Bug' display
        8. Sort the bugs
        9. Persist the bugs in the browser local storage
        10. Display 'createdAt' for each bug
        11. Persist the bugs in the server
        12. Implement 'Projects' module
        13. Implement Routing
        14. Implement 'Authentication'
        15. Write test cases
        16. Package & Deploy


Refactoring the trimText, sort & elapses/createdAt pipes into a module
where a module is a grouping of entities such as components, pipes, services, directive'

src/app
    /util
        utils.module.ts (Define the Utils module)
            /pipes
                trimText.pipe.ts (Define the TrimTextPipe)
                sort.pipe.ts (Define the SortPipe)
                elapsed.pipe.ts (Define the ElapsedPipe)

            Register the pipes in the utils module

    Import the utils module in the app module
        Use the pipes from the utils module



For any data manipulation we should talk to the service and then for any 
onbtaining data we should just ask the parent component to get that data for 
presentation! 

BugComponent addsNewBug -> service() -> updates the data in BugsComponent []

where the service will have the methods such as addNewBug, toToggle, etc...

This works because services are singleton meaning that they will only have a single
instance and hence will have refernce to the original data array that we need to 
manipulate and can then feed that data into the child components as they need it
so that they can display the various things they need in the UI


